<?xml version="1.0" encoding="UTF-8"?>
<b:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/security
			http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
			">
    
    <b:import resource="classpath:ss-uniauth-common.xml"/>
    <b:import resource="classpath:ss-uniauth-client-cache.xml"/>

    <global-method-security pre-post-annotations="enabled" proxy-target-class="true">
    	<expression-handler ref="methodSecurityExpressionHandler"/>
    </global-method-security>
    
	<b:bean id="methodSecurityExpressionHandler" class="com.dianrong.common.uniauth.client.custom.handler.SSMethodSecurityExpressionHandler">
	</b:bean>
    
	<b:bean id="casAuthEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<b:property name="loginUrl" value="#{uniauthConfig['cas_server']}/login"/>
		<b:property name="serviceProperties" ref="casService"/>
	</b:bean>  
	
	<b:bean id="casService" class="org.springframework.security.cas.ServiceProperties">
		<b:property name="service" value="#{uniauthConfig['domains.'+domainDefine.domainCode]}/login/cas"/>
		<b:property name="authenticateAllArtifacts" value="true"/>
		<b:property name="sendRenew" value="false" />
	</b:bean>
		
	<b:bean id="ssAuthenticationSuccessHandler" class="com.dianrong.common.uniauth.client.custom.handler.SSSavedRequestAwareAuthenticationSuccessHandler">
	</b:bean>
	
	<!-- JWT身份识别失败的处理Handler -->
	<b:bean id="jwtAuthenticationFailureHandler" class="com.dianrong.common.uniauth.client.custom.handler.JWTAuthenticationFailureHandler">
	   <b:property name="failedAuthenticationRedirectUrl" value="#{uniauthConfig['cas_server']}/logout"/>
    </b:bean>
	
	<b:bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <b:property name="ticketValidator" ref="casTicketValidator"/>
        <b:property name="serviceProperties" ref="casService"/>
        <b:property name="key" value="dianrong-ss-uniauth-cas"/>
        <b:property name="authenticationUserDetailsService" ref="authenticationUserDetailsService"/>
    </b:bean>

	<!--JWT-->
    <b:bean id="jwtAuthenticationProvider" class="com.dianrong.common.uniauth.client.custom.jwt.JWTAuthenticationProvider">
        <b:constructor-arg ref="ssUserDetailService"/>
    </b:bean>

	<!--BasicAuth-->
	<b:bean id="basicAuthAuthenticationProvider" class="com.dianrong.common.uniauth.client.custom.basicauth.UniauthBasicAuthProvider">
		<b:constructor-arg ref="ssUserLoginService"/>
	</b:bean>
	
	<b:bean id="authenticationProviders" class="com.dianrong.common.uniauth.client.custom.sharedomain.ShareDomainCasAuthenticationManager">
	   <b:constructor-arg>
	       <b:list>
	           <b:ref bean= "casAuthenticationProvider"/>
	           <b:ref bean= "jwtAuthenticationProvider"/>
			   <b:ref bean= "basicAuthAuthenticationProvider"/>
	       </b:list>
	   </b:constructor-arg>
	</b:bean>
	
	<b:bean id="casTicketValidator" class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
		<b:constructor-arg value="#{domainDefine.serviceTicketValidateWithInnerAddress?uniauthConfig['cas_server.internal_address']:uniauthConfig['cas_server']}"/>
	</b:bean>
	
	<b:bean id="authenticationUserDetailsService" class="com.dianrong.common.uniauth.client.custom.multitenancy.MultiTenancyUserDetailsWrapper">
		<b:property name="userDetailsService" ref="ssUserDetailService"/>
	</b:bean>
	
	<!-- for JWT -->
	<b:bean id="jwtQuery" class="com.dianrong.common.uniauth.client.custom.jwt.ComposedJWTQuery"/>
	
	<!-- 提供一个默认实现 -->
	<b:bean id="cookieJWTQuery" class="com.dianrong.common.uniauth.client.custom.jwt.CookieJWTQuery">
	   <b:property name="jwtCookieNameSuffix"  value="#{uniauthConfig['authentication.jwt.cookie.suffix']}"/>
	</b:bean>
	
	<b:bean id="uniauthJWTSecurity" class="com.dianrong.common.uniauth.common.jwt.UniauthJWTSecurity">
        <b:constructor-arg index="0" value="#{uniauthConfig['authentication.jwt.private.key']}"/>
        <b:constructor-arg index="1" value="#{uniauthConfig['authentication.jwt.public.key']}"/>
        <b:property name="issuedSecondsAheadOffset" value="10"/>
    </b:bean>

	<authentication-manager alias="authenticationManager">
	   <authentication-provider ref="authenticationProviders"/>
	</authentication-manager>
	
	<b:bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
	<b:bean id="ssUserDetailService" class="com.dianrong.common.uniauth.client.custom.multitenancy.SSMultiTenancyUserDetailService" />
	<b:bean id="ssUserLoginService" class="com.dianrong.common.uniauth.client.custom.multitenancy.SSMultiTenancyUserLoginService" />
    <b:bean id="ssBeanPostProcessor" class="org.springframework.security.web.access.expression.SSBeanPostProcessor"/>
    <b:bean id="ssRegularBeanPostProcessor" class="org.springframework.security.web.access.regular.SSRegularFilterBeanPostProcessor"/>
    <b:bean id="sessionManageBeanPostProcessor" class="org.springframework.security.web.access.sessionmanage.SessionManageBeanPostProcessor">
        <b:property name="zooKeeperConfig" ref="zooKeeperConfig"/>
    </b:bean>
</b:beans>
